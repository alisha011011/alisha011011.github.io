[{"content":"Project description Use selenium to navigate to webpages.\nInstall selenium on Windows  To install selenium, in a command prompt window, run: pip install selenium Download the latest version of the geckodriver. In system environment variables, add the path to the unzipped geckodriver folder in the Path variable.  Python sample code 1 2 3 4  from selenium import webdriver browser = webdriver.Firefox() # initialize and open a Firefox browser window. browser.get(\u0026#39;https://alisha.dev/blog/index.html\u0026#39;) # navigate to my blog homepage.   Next steps  See Mozilla geckodriver. See Selenium. ","description":"","id":0,"section":"blog","tags":["python","selenium","webscraping","firefox","excel","project"],"title":"Python Selenium project","uri":"https://alisha.dev/blog/python_selenium/"},{"content":"Project description Create a python module to extract Excel column cell values using the Python openpyxl library.\nInstall openpyxl on Windows Download the latest version of openpyxl.\nIn a command prompt window, run: pip install openpyxl\nPython module code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  # Return a set of row values within a specified row range # for a specific column on a sheet within an excel file. import openpyxl from openpyxl import load_workbook # xlsPath is the path to an excel file (e.g. \u0026#39;D:\\Data\\myfile.xlsx\u0026#39; # sheetName must be the actual sheet name (e.g. Sheet2). # columnName must be an uppercase alphabetical excel column designator (e.g. \u0026#39;A\u0026#39;) # rowStart and rowEnd are included in the result set to return. def getColumnCellValues(excelFilePath, sheetName, columnName, rowStart, rowEnd): # load excel with its path workBook = openpyxl.load_workbook(excelFilePath) # open excel workbook. # get index of specified sheet and set that sheet as active: activeSheet = workBook.get_sheet_by_name(sheetName) # read row values in specified colName: rowIndex = 0 valueArray = [] for cell in activeSheet[columnName]: rowIndex += 1 if rowIndex \u0026lt; rowStart: # skip rows before rowStart. continue if rowIndex \u0026gt; rowEnd: # skip rows after rowEnd. continue valueArray.append(cell.value) # add to array. # return values: return valueArray # xlsPath is the path to an excel file (e.g. \u0026#39;D:\\Data\\myfile.xlsx\u0026#39; # sheetName must be the actual sheet name (e.g. Sheet2). # columnName must be an uppercase alphabetical excel column designator (e.g. \u0026#39;A\u0026#39;) # rowStart is the row to start writing cellValues. # cellValues are the values to write to the column cells starting at rowStart. def setColumnCellValues(excelFilePath, sheetName, columnName, rowStart, cellValues): # load excel with its path workBook = openpyxl.load_workbook(excelFilePath) # open excel workbook. # get index of specified sheet and set that sheet as active: activeSheet = workBook.get_sheet_by_name(sheetName) # read row values in specified colName: rowIndex = 0 writeIndex = 0 # track value index in cellValues list. for cell in activeSheet[columnName]: rowIndex += 1 if rowIndex \u0026lt; rowStart: # skip rows before rowStart. continue cell.value = cellValues[writeIndex] # write to cell. writeIndex += 1 if writeIndex \u0026gt; len(cellValues) - 1: break #save excel file: workBook.save(excelFilePath)   Python code to call the module\u0026rsquo;s function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import excelLib # read cell values from column E starting at row 10 and ending on row 15 (6 values): columnCellValues = excelLib.getColumnCellValues( xlsPath=\u0026#39;D:\\\\data\\\\myfile.xlsx\u0026#39;, sheetName=\u0026#39;mysheet\u0026#39;, columnName=\u0026#39;E\u0026#39;, rowStart=10, rowEnd=15) # print the 6 values read: for cellValue in columnCellValues: print(cellValue) # write cell values into column G starting at row 10: excelLib.setColumnCellValues( xlsPath=\u0026#39;D:\\\\data\\\\myfile.xlsx\u0026#39;, sheetName=\u0026#39;mysheet\u0026#39;, columnName=\u0026#39;F\u0026#39;, rowStart=10, cellValues=[1,2,3,4,5,6])   ","description":"","id":1,"section":"blog","tags":["python","excel","python module","project"],"title":"Python Excel module","uri":"https://alisha.dev/blog/python_excel_module/"},{"content":"In this article, I use Hyper-V to install a Windows 10 virtual machine (on a Windows machine). This is useful when performing development work that requires installing software runtimes such as Java.\nPrerequisites  See Windows 10 Hyper-V System Requirements documentation for compatibility requirements for your computer.  Install Hyper-V   Search for \u0026ldquo;feature\u0026rdquo; in the Windows search bar and select Turn Windows features on or off:   Select Hyper-V and expand the menu to check that Hyper-V Management Tools and Hyper-V Platform are selected, then select OK :   If Windows needs to reboot your PC, select Restart now:   Search for \u0026ldquo;hyper-v quick\u0026rdquo; in the Windows search bar and select Hyper-V Quick Create: Alternatively, search for \u0026ldquo;windows administrative tools\u0026rdquo; in the Windows search bar and select Windows Administrative Tools. Browse the list of tools and select Hyper-V Quick Create.\n  Select Windows 10 dev environment and Create Virtual Machine:   Wait for download, verification, and extraction of the Windows 10 dev environment image:   Select Connect:   Select Start to launch your virtual machine:   Select whether you want to allow your PC to be discoverable by other PCs and devices:   Next steps  Learn how to Share devices with your virtual machine. ","description":"","id":2,"section":"blog","tags":["virtual machine","hyper-v"],"title":"Install a Windows Virtual Machine","uri":"https://alisha.dev/blog/install_vm/"},{"content":"In this article, I use Azure Computer Vision to extract text from images (OCR).\nPrerequisites  Open a Microsoft Azure account.  Obtain a Computer Vision API key   Sign into your Microsoft Azure account.\n  Select Computer Vision:   Select Create computer vision:   Fill out the Create Computer Vision form:\n(1) Select your resource group (create one if it doesn\u0026rsquo;t exist).\n(2) Select your region, and enter a name for your instance.\n(3) Select a pricing tier.\n(4) Click Review + create.\n  Select Create:   After your database is deployed, select Go to resource:   Read the Quick start guidance on using your API key and endpoint:   Select Keys and Endpoint to get your API key and endpoint which are required for making web API calls:   Install Python libraries In a command prompt window, run: pip install --upgrade azure-cognitiveservices-vision-computervision\nThen run: pip install pillow\nPython code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  # Based on Azure-Samples / cognitive-services-quickstart-code from GitHub (https://github.com/Azure-Samples/cognitive-services-quickstart-code/blob/master/python/ComputerVision/ComputerVisionQuickstart.py): from azure.cognitiveservices.vision.computervision import ComputerVisionClient from azure.cognitiveservices.vision.computervision.models import OperationStatusCodes from azure.cognitiveservices.vision.computervision.models import VisualFeatureTypes from msrest.authentication import CognitiveServicesCredentials from array import array import os from PIL import Image import sys import time # create a client: subscription_key = \u0026#34;YOUR COMPUTER VISION KEY\u0026#34; endpoint = \u0026#34;YOUR COMPUTER VISION ENDPOINT\u0026#34; computervision_client = ComputerVisionClient(endpoint, CognitiveServicesCredentials(subscription_key)) # Get image path read_image_path = os.path.join (\u0026#34;YOUR FILE PATH\\\\FILE NAME\u0026#34;) # Open the image read_image = open(read_image_path, \u0026#34;rb\u0026#34;) # Call API with image and raw response (allows you to get the operation location) read_response = computervision_client.read_in_stream(read_image, raw=True) # Get the operation location (URL with ID as last appendage) read_operation_location = read_response.headers[\u0026#34;Operation-Location\u0026#34;] # Take the ID off and use to get results operation_id = read_operation_location.split(\u0026#34;/\u0026#34;)[-1] # Call the \u0026#34;GET\u0026#34; API and wait for the retrieval of the results while True: read_result = computervision_client.get_read_result(operation_id) if read_result.status.lower () not in [\u0026#39;notstarted\u0026#39;, \u0026#39;running\u0026#39;]: break print (\u0026#39;Waiting for result...\u0026#39;) time.sleep(3) # Print results, line by line if read_result.status == OperationStatusCodes.succeeded: for text_result in read_result.analyze_result.read_results: for line in text_result.lines: print(line.text) print()   Sample image for text extraction Extracted text 1 2  Open 24 Hours   Next steps  Learn about Optical character recognition. ","description":"","id":3,"section":"blog","tags":["azure","computer vision","ocr"],"title":"Azure Computer Vision","uri":"https://alisha.dev/blog/azure_compvision/"},{"content":"Prerequisites  Install Java SE from Oracle. See Apache Jena documentation for minimum version requirements.  Install the Apache Jena Fuseki web application Apache Jena Fuseki is an open source SPARQL server that runs as a Java web application to support linked data, RDF/XML, and Web Ontology Language (OWL). You can use the Apache Jena Fuseki web application to upload RDF/XML files, view N-Triples, and run SPARQL queries.\nWindows installation steps:   Download the apache-jena-fuseki zip file (e.g. apache-jena-fuseki-4.1.0.zip).\n  Extract the zip file contents to a folder on your hard drive.\n  In that folder, run fuseki-server.bat to start the Apache Jena Fuseki web application.\n  Open a browser, and go to the URLlocalhost:3030to launch the web application:   Run a SPARQL query in Apache Jena Fuseki The following steps describe how to upload triples and run queries in the web application:\n  Select Add one on the web page to create a new dataset:   Enter a dataset name and select create dataset:   Prepare a sample RDF format file, such as the following RDF/XML file (sample_author.xml):   Select upload data:   Click select files to upload an RDF format file (e.g. RDF/XML or Turtle):   Click the empty SPARQL query box to auto-generate a default query to view all triples, then click the run arrow:   Scroll down to Query results to view the triples:   Run your own SPARQL query For example, to get the name of the author, run the query:\n1 2 3 4 5 6 7 8  PREFIX author: \u0026lt;https://example.org#\u0026gt; PREFIX viaf: \u0026lt;http://viaf.org/viaf/\u0026gt; SELECT ?name WHERE { \u0026lt;http://viaf.org/viaf/7524679\u0026gt; author:fullname ?name . } LIMIT 25   This returns Rudyard Kipling\nNext steps  Explore W3C RDF primer ","description":"","id":4,"section":"blog","tags":["apache","jena","fuseki","sparql","rdf","n-triples","java"],"title":"Create an Apache Jena triplestore","uri":"https://alisha.dev/blog/apache_jena/"},{"content":"Prerequisites  Create an Azure NoSQL graph database  Connect to and query an Azure NoSQL graph database You can use C# to connect to and create a graph in your Azure NoSQL database.\nC# codeusing System; using System.Linq; using System.Net.WebSockets; using System.Text.Json; using Gremlin.Net.Driver; using Gremlin.Net.Structure.IO.GraphSON; using Newtonsoft.Json; namespace GremlinNetSample { // based on Azure sample: https://github.com/Azure-Samples/azure-cosmos-db-graph-gremlindotnet-getting-started  class Program { static void Main(string[] args) { // Azure Cosmos Graph database configuration values:  var host = \u0026#34;mycosmos-account.gremlin.cosmos.azure.com\u0026#34;; var port = 443; var enableSsl = true; var databaseName = \u0026#34;mydatabase\u0026#34;; var graphName = \u0026#34;mygraph\u0026#34;; var username = $\u0026#34;/dbs/{databaseName}/colls/{graphName}\u0026#34;; var password = Environment.GetEnvironmentVariable(\u0026#34;GREMLIN_DB_PRIMARY_KEY\u0026#34;); // store primary key as a system environment variable.  // create a gremlin server object:  var gremlinServer = new GremlinServer(host, port, enableSsl, username, password); // configure connection pool:  var connectionPoolSettings = new ConnectionPoolSettings() { MaxInProcessPerConnection = 10, PoolSize = 30, ReconnectionAttempts = 3, ReconnectionBaseDelay = TimeSpan.FromMilliseconds(500) }; // create a websocket configuration object:  var webSocketConfiguration = new Action\u0026lt;ClientWebSocketOptions\u0026gt;(options =\u0026gt; { options.KeepAliveInterval = TimeSpan.FromSeconds(10); }); // create a gremlin client:  using var gremlinClient = new GremlinClient( gremlinServer, new GraphSON2Reader(), new GraphSON2Writer(), GremlinClient.GraphSON2MimeType, connectionPoolSettings, webSocketConfiguration); RunQueries(gremlinClient); } // Run your queries here.  private static void RunQueries(GremlinClient gremlinClient) { string myQuery = null; // delete all graph vertices, edges, and properties (does not delete the graph):  myQuery = \u0026#34;g.V().drop()\u0026#34;; SendQuery(gremlinClient, myQuery); // add vertex (a person):  myQuery = \u0026#34;g.addV(\u0026#39;person\u0026#39;).property(\u0026#39;id\u0026#39;, \u0026#39;Juanita\u0026#39;).property(\u0026#39;firstName\u0026#39;, \u0026#39;Juanita\u0026#39;).property(\u0026#39;location\u0026#39;, \u0026#39;Los Angeles\u0026#39;).property(\u0026#39;pk\u0026#39;, \u0026#39;pk\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // add vertex (a person):  myQuery = \u0026#34;g.addV(\u0026#39;person\u0026#39;).property(\u0026#39;id\u0026#39;, \u0026#39;Sam\u0026#39;).property(\u0026#39;firstName\u0026#39;, \u0026#39;Sam\u0026#39;).property(\u0026#39;location\u0026#39;, \u0026#39;New Mexico\u0026#39;).property(\u0026#39;pk\u0026#39;, \u0026#39;pk\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // add vertex (a person):  myQuery = \u0026#34;g.addV(\u0026#39;person\u0026#39;).property(\u0026#39;id\u0026#39;, \u0026#39;Nikhil\u0026#39;).property(\u0026#39;firstName\u0026#39;, \u0026#39;Nikhil\u0026#39;).property(\u0026#39;location\u0026#39;, \u0026#39;New York\u0026#39;).property(\u0026#39;pk\u0026#39;, \u0026#39;pk\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // add vertex (a movie):  myQuery = \u0026#34;g.addv(\u0026#39;movie\u0026#39;).property(\u0026#39;id\u0026#39;, \u0026#39;I, robot\u0026#39;).property(\u0026#39;title\u0026#39;, \u0026#39;I, robot\u0026#39;).property(\u0026#39;year\u0026#39;, 2004).property(\u0026#39;pk\u0026#39;, \u0026#39;pk\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // add vertex (a movie):  myQuery = \u0026#34;g.addv(\u0026#39;movie\u0026#39;).property(\u0026#39;id\u0026#39;, \u0026#39;Fried green tomatoes\u0026#39;).property(\u0026#39;title\u0026#39;, \u0026#39;Fried green tomatoes\u0026#39;).property(\u0026#39;year\u0026#39;, 1991).property(\u0026#39;pk\u0026#39;, \u0026#39;pk\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // add vertex (a movie):  myQuery = \u0026#34;g.addv(\u0026#39;movie\u0026#39;).property(\u0026#39;id\u0026#39;, \u0026#39;David Copperfield\u0026#39;).property(\u0026#39;title\u0026#39;, \u0026#39;David Copperfield\u0026#39;).property(\u0026#39;year\u0026#39;, 2019).property(\u0026#39;pk\u0026#39;, \u0026#39;pk\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // add edge (a relationship):  myQuery = \u0026#34;g.V(\u0026#39;Juanita\u0026#39;).addE(\u0026#39;knows\u0026#39;).to(g.V(\u0026#39;Sam\u0026#39;))\u0026#34;; SendQuery(gremlinClient, myQuery); // add edge (a relationship):  myQuery = \u0026#34;g.V(\u0026#39;Sam\u0026#39;).addE(\u0026#39;knows\u0026#39;).to(g.V(\u0026#39;Nikhil\u0026#39;))\u0026#34;; SendQuery(gremlinClient, myQuery); // add edge (a relationship):  myQuery = \u0026#34;g.V(\u0026#39;Juanita\u0026#39;).addE(\u0026#39;likes\u0026#39;).to(g.V(\u0026#39;I, robot\u0026#39;))\u0026#34;; SendQuery(gremlinClient, myQuery); // add edge (a relationship):  myQuery = \u0026#34;g.V(\u0026#39;Sam\u0026#39;).addE(\u0026#39;likes\u0026#39;).to(g.V(\u0026#39;Fried green tomatoes\u0026#39;))\u0026#34;; SendQuery(gremlinClient, myQuery); // add edge (a relationship):  myQuery = \u0026#34;g.V(\u0026#39;Nikhil\u0026#39;).addE(\u0026#39;likes\u0026#39;).to(g.V(\u0026#39;David Copperfield\u0026#39;))\u0026#34;; SendQuery(gremlinClient, myQuery); // count vertices:  myQuery = \u0026#34;g.V().count()\u0026#34;; SendQuery(gremlinClient, myQuery); // get graph contents:  myQuery = \u0026#34;g.V()\u0026#34;; SendQuery(gremlinClient, myQuery); // get the person that Juanita knows (Person A):  myQuery = \u0026#34;g.V(\u0026#39;Juanita\u0026#39;).out(\u0026#39;knows\u0026#39;).hasLabel(\u0026#39;person\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // get the movie that Person A likes:  myQuery = \u0026#34;g.V(\u0026#39;Juanita\u0026#39;).out(\u0026#39;knows\u0026#39;).hasLabel(\u0026#39;person\u0026#39;).out(\u0026#39;likes\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // get the person that Person A knows (Person B):  myQuery = \u0026#34;g.V(\u0026#39;Juanita\u0026#39;).out(\u0026#39;knows\u0026#39;).hasLabel(\u0026#39;person\u0026#39;).out(\u0026#39;knows\u0026#39;).hasLabel(\u0026#39;person\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); // get the movie that Person B likes:  myQuery = \u0026#34;g.V(\u0026#39;Juanita\u0026#39;).out(\u0026#39;knows\u0026#39;).hasLabel(\u0026#39;person\u0026#39;).out(\u0026#39;knows\u0026#39;).hasLabel(\u0026#39;person\u0026#39;).out(\u0026#39;likes\u0026#39;)\u0026#34;; SendQuery(gremlinClient, myQuery); } // send gremlin query to cloud for execution and print result.  private static void SendQuery(GremlinClient gremlinClient, string query) { try { var resultSet = gremlinClient.SubmitAsync\u0026lt;dynamic\u0026gt;(query).Result; Console.WriteLine(Environment.NewLine + $\u0026#34;Result set for query: {query}\u0026#34;); var jsonStr = \u0026#34;[\u0026#34; + string.Join(\u0026#34;,\u0026#34;, resultSet.Select(x =\u0026gt; JsonConvert.SerializeObject(x))) + \u0026#34;]\u0026#34;; PrettyPrintJson(jsonStr); } catch (Exception e) { Console.WriteLine(e.Message); } } // prettyprint JSON string.  public static void PrettyPrintJson(string jsonString) { var options = new JsonSerializerOptions() { WriteIndented = true }; var jsonElement = System.Text.Json.JsonSerializer.Deserialize\u0026lt;JsonElement\u0026gt;(jsonString); Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(jsonElement, options)); } } }   Microsoft Azure Data Explorer You can use the Microsoft Azure Data Explorer to view and query your graph database:\n  Sign into your Microsoft Azure account.\n  Search for your database in Recent resources or choose Azure Cosmos DB, and then select View:   Choose Data Explorer. In the right hand pane, expand the Data node to see your graph database:   Expand the Scale node for your graph database, choose Graph, and then select the Load graph button:   In the Results list, choose a vertex to see its associated edges and vertices in your graph, with its properties listed to the right:   Notes Azure NoSQL graph database does not support the SPARQL query language.\nNext steps  Explore Graph data modeling for Azure Cosmos DB Gremlin API Explore Gremlin graph traversal language Explore the Azure Data Explorer Explore the tutorial Query Azure Cosmos DB Gremlin API by using Gremlin ","description":"","id":5,"section":"blog","tags":["azure","nosql","database","gremlin","c#","query"],"title":"Connect to and query an Azure NoSQL graph database","uri":"https://alisha.dev/blog/azure_nosql_graph_query/"},{"content":"Prerequisites  Open a Microsoft Azure account.  Create an Azure NoSQL graph database   Sign into your Microsoft Azure account.\n  Select Create a resource:   Select Create Azure Cosmos DB:   Select Create Gremlin (Graph):   Complete the form Create Azure Cosmos DB account - Gremlin (Graph):\n(1) Select your resource group (create one if necessary).\n(2) Enter an account name.\n(3) Select your location, capacity mode, and whether to apply a free tier discount for the provisioned-throughout option.\n(4) Click Review + create.\n  Select Create:   Wait while your database is being deployed:   After your database is deployed, select Go to resource:   Select Add Graph:   Fillout the New graph form:\n  Scroll to complete the New graph form, and select OK:   Your new graph database is deployed and ready to use:   Next steps  Connect to and query an Azure NoSQL graph database ","description":"","id":6,"section":"blog","tags":["azure","nosql","cosmos","database","graph"],"title":"Create an Azure NoSQL graph database","uri":"https://alisha.dev/blog/azure_nosql_graph_create/"},{"content":"Prerequisites  Open a Microsoft Azure account. Create an Azure SQL database  Install pyodbc on Windows In a command prompt window, run: pip install pyodbc\nAdd a table to your Azure SQL database Use the Python pyodbc library to create, populate, and delete a table in your Azure SQL database.\nPython code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  import pyodbc # import the pyodbc library server = \u0026#39;tcp:myserver011.database.windows.net\u0026#39; database = \u0026#39;MyDatabase\u0026#39; username = \u0026#39;MyUsername\u0026#39; password = \u0026#39;**********\u0026#39; # insert password connStr = \u0026#39;DRIVER={ODBC Driver 17 for SQL Server};SERVER=\u0026#39; + server + \u0026#39;;DATABASE=\u0026#39; + database + \u0026#39;;UID=\u0026#39; + username + \u0026#39;;PWD=\u0026#39; + password cnxn = pyodbc.connect(connStr, autocommit=True) # autocommit avoids explicit cdxn.commit() after each execute(). cursor = cnxn.cursor() # create table with columns (declare column type) cursor.execute(\u0026#34;\u0026#34;\u0026#34; CREATE TABLE myTable (Title TEXT, Author TEXT, Format TEXT, Price DECIMAL (4,2)) \u0026#34;\u0026#34;\u0026#34;) # insert rows in table cursor.execute(\u0026#34;\u0026#34;\u0026#34; INSERT INTO myTable VALUES (\u0026#39;Dark sacred night\u0026#39;, \u0026#39;Michael Connelly\u0026#39;, \u0026#39;paperback\u0026#39;, 12.99) INSERT INTO myTable VALUES (\u0026#39;The hungry tide\u0026#39;, \u0026#39;Amitav Ghosh\u0026#39;, \u0026#39;paperback\u0026#39;, 13.99) INSERT INTO myTable VALUES (\u0026#39;Watership down\u0026#39;, \u0026#39;Richard Adams\u0026#39;, \u0026#39;paperback\u0026#39;, 11.98) \u0026#34;\u0026#34;\u0026#34;) # add row cursor.execute(\u0026#34;INSERT INTO myTable (Title, Author, Format) VALUES (\u0026#39;The storm\u0026#39;, \u0026#39;Tomás González\u0026#39;, \u0026#39;paperback\u0026#39;)\u0026#34;) # update data cursor.execute(\u0026#34;UPDATE myTable SET Price = 16.00 WHERE CONVERT(VARCHAR, Title) = \u0026#39;The storm\u0026#39;\u0026#34;) # delete data cursor.execute(\u0026#34;DELETE FROM myTable WHERE CONVERT(VARCHAR, Title) = \u0026#39;The storm\u0026#39;\u0026#34;) #delete table cursor.execute(\u0026#34;DROP TABLE IF EXISTS myTable\u0026#34;)   Microsoft Azure Query editor You can use the Microsoft Azure Query editor to query your SQL database:\n  Sign into your Microsoft Azure account.\n  Search for your database in \u0026lsquo;Recent resources\u0026rsquo; or select the \u0026lsquo;SQL databases\u0026rsquo; button:   Select Query editor and then sign-in:   Select Tables and expand the node to see your tables:   Expand your table node to see column names and types:   To see the data in your table, \u0026lsquo;Select Top 1000 Rows\u0026rsquo; from the ellipsis menu:   Run the auto-generated query:   To run a different query, select \u0026lsquo;New Query\u0026rsquo;:   Enter a new query (1) and select \u0026lsquo;Run\u0026rsquo; (2): Check the Messages window to see the status of the query (3).\n  To see the updated table, \u0026lsquo;Select Top 1000 Rows\u0026rsquo; again from the ellipsis menu:   To update data, select \u0026lsquo;New Query\u0026rsquo; (1), enter a query (2), and run the query (3): Check the Messages window to see the status of the query (4).\n  To see the updated table, \u0026lsquo;Select Top 1000 Rows\u0026rsquo; again from the ellipsis menu:  ","description":"","id":7,"section":"blog","tags":["azure","sql","database","pyodbc","query"],"title":"Connect to and query an Azure SQL database","uri":"https://alisha.dev/blog/azure_sql_query/"},{"content":"Prerequisites  Open a Microsoft Azure account.  Create an Azure SQL database   Sign into your Microsoft Azure account.\n  Select the \u0026lsquo;Create a resource\u0026rsquo; button:   Select the SQL Database \u0026lsquo;Create\u0026rsquo; link:   Fill out the database form: (1) Select your resource group (create one if it doesn\u0026rsquo;t exist).\n(2) Enter a database name.\n(3) Select the \u0026lsquo;Create new\u0026rsquo; server link.\n(4) Enter the server name, username, password, and your location.\n(5) Select the \u0026lsquo;OK\u0026rsquo; button.\n  Select the \u0026lsquo;Review + create\u0026rsquo; button:   Select the \u0026lsquo;Create\u0026rsquo; button:   Wait while your database is being deployed:   After your database is deployed, select the \u0026lsquo;Go to resource\u0026rsquo; button:   Select the \u0026lsquo;Show database connection strings\u0026rsquo; link:   Save the connection string from the ODBC tab for later use. Download and install the Windows ODBC driver from the download link:   Browse back to the screen shown in step 9, and Select the \u0026lsquo;Set server firewall\u0026rsquo; link. On the \u0026lsquo;Firewall settings\u0026rsquo; page, select \u0026lsquo;Add client IP\u0026rsquo; to populate a new firewall rule with your computer\u0026rsquo;s IP address:   Select \u0026lsquo;Save\u0026rsquo; to allow a database connection from your computer:   Now your new SQL database is ready to use.\n  Next steps  Learn how to Connect to an Azure SQL database. ","description":"","id":8,"section":"blog","tags":["azure","sql","database"],"title":"Create an Azure SQL database","uri":"https://alisha.dev/blog/azure_sql_create/"},{"content":"Git Installation   Download Git\n  Select the following options in each installation window:\n  Click the Install button.\n  Git usage (common commands)   Right-click on the repository root folder add select \u0026lsquo;Git Bash Here\u0026rsquo;.\n  To see new files or modified files: git status\n  To create a new git repository: git init\n  To stage files: git add .\n  To commit files: git commit -m \u0026quot;Initial commit\u0026quot;\n  To set remote GitHub repo url: git remote add origin \u0026lt;path to repo\u0026gt;\n  To push files to GitHub repo: git push origin master\n ","description":"","id":9,"section":"blog","tags":["git"],"title":"Git Install \u0026 Usage","uri":"https://alisha.dev/blog/python_git/"},{"content":"Project description Use regular expressions to parse a bibliographic MARC record (text format) and convert the record to XML using the Python lxml library.\nPython code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  import re # import re (regular expression) module from lxml import etree # read text file: with open(\u0026#39;bib.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as myFile: data = myFile.read() # split text into non-empty lines (marc fields): marcFields = [line for line in re.split(\u0026#34;\\n\u0026#34;, data) if line.strip()] # remove blank/whitespace lines # create xml root node: xmlRootNode = etree.Element(\u0026#39;record\u0026#39;, xmlns = \u0026#39;http://www.loc.gov/MARC21/slim\u0026#39;) # add xml root node content: fieldIndex = 0 while fieldIndex \u0026lt; len(marcFields): marcField = marcFields[fieldIndex] marcTag = marcField[0:3] fieldIndex += 1 # extract leader field: if marcTag == \u0026#39;LDR\u0026#39;: ldrText = marcField[4:] etree.SubElement(xmlRootNode, \u0026#39;leader\u0026#39;).text = ldrText #add leader xml subelement. continue # skip directory field: if marcTag == \u0026#39;DIR\u0026#39;: continue # extract control fields: if re.search(\u0026#39;00\\d\u0026#39;, marcTag): # alternatively if marcTag[0:2] == \u0026#39;00\u0026#39; ctrlFieldText = marcField[4:] etree.SubElement(xmlRootNode, \u0026#39;controlfield\u0026#39;, tag = marcTag).text = ctrlFieldText #add control field xml subelement. continue # extract variable fields: indicator1 = marcField[4:5] # extract indicator 1. indicator2 = marcField[5:6] # extract indicator 2.  dataField = etree.SubElement(xmlRootNode, \u0026#39;datafield\u0026#39;, tag = marcTag, ind1 = indicator1, ind2 = indicator2) #add datafield xml subelement. # extract subfields: rawSubfields = [line for line in re.split(\u0026#39;ǂ\u0026#39;, marcField[6:]) if line.strip()] # remove blank/whitespace lines. subfieldIndex = 0 while subfieldIndex \u0026lt; len(rawSubfields): rawSubfield = rawSubfields[subfieldIndex] marcSubfieldTag = rawSubfield[0] marcSubfieldData = rawSubfield[2:].strip() subfieldIndex += 1 subfield = etree.SubElement(dataField, \u0026#39;subfield\u0026#39;, code = marcSubfieldTag).text = marcSubfieldData #add subfield xml subelement. # generate xml file: fileContent = etree.tostring(xmlRootNode, encoding=\u0026#39;unicode\u0026#39;, pretty_print=True) with open(\u0026#39;bib.xml\u0026#39;, \u0026#39;w\u0026#39;, encoding = \u0026#39;utf-8\u0026#39;) as myFile: # open file for writing. myFile.write(fileContent) # specify string to write. # print xml file: myFile = open(\u0026#39;bib.xml\u0026#39;, encoding = \u0026#39;utf-8\u0026#39;) print(myFile.read())   Text file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  LDR 01579nam a2200397 i 4500 DIR 001001900000003000800019005001700027008004100044010001800085020003100103020002800134035003200162040003100194043001200225100003900237245004300276250001900319264006000338264001100398300002400409336002600433337002800459338002700487490002800514500007700542520009900619588007400718650003600792650005000828600002700878650003100905650004600936655004200982655003101024907012601055 001 BIB-0000-0000-0152 003 ObibOrg 005 20201001000000.0 008 201001t20182018nyu 000 f eng d 010 ǂa 2018945140 020 ǂa 9780316484800 ǂq (hardcover) 020 ǂa 0316484806 ǂq (hardcover) 035 ǂa (ObibOrg)BIB-0000-0000-0152 040 ǂa ObibOrg ǂb eng ǂe rda ǂc ObibOrg 043 ǂa n-us-ca 100 1 ǂa Connelly, Michael, ǂd 1956- ǂe author. 245 10 ǂa Dark sacred night / ǂc Michael Connelly. 250 ǂa First edition. 264 1 ǂa New York, New York : ǂb Little, Brown and Company, ǂc 2018. 264 4 ǂc ©2018 300 ǂa 433 pages ; ǂc 25 cm. 336 ǂa text ǂb txt ǂ2 rdacontent 337 ǂa unmediated ǂb n ǂ2 rdamedia 338 ǂa volume ǂb nc ǂ2 rdacarrier 490 0 ǂa Ballard and Bosch novel 500 ǂa This is a Ballard and Bosch Novel, a spin-off of the Harry Bosch series. 520 0 ǂa Harry Bosch and Renée Ballard team up to investigate the homicide of a runaway teenage girl. 588 ǂa This bibliographic record is licensed under Creative Commons CC0 1.0. 650 0 ǂa Murder ǂx Investigation ǂv Fiction. 650 0 ǂa Cold cases (Criminal investigation) ǂv Fiction. 600 10 ǂa Bosch, Harry ǂv Fiction. 650 0 ǂa Women detectives ǂv Fiction. 650 0 ǂa Police ǂz California ǂz Los Angeles ǂv Fiction. 655 7 ǂa Detective and mystery fiction. ǂ2 lcgft 655 7 ǂa Thrillers (Fiction) ǂ2 lcgft 907 ǂa Novel ǂb Mystery ǂb Suspense / Thriller ǂc Cold case ǂc Detective ǂc Imaginary person ǂc Investigation ǂc Murder ǂc North America ǂc Police   Generated XML file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124  \u0026lt;record xmlns=\u0026#34;http://www.loc.gov/MARC21/slim\u0026#34;\u0026gt; \u0026lt;leader\u0026gt;01579nam a2200397 i 4500\u0026lt;/leader\u0026gt; \u0026lt;controlfield tag=\u0026#34;001\u0026#34;\u0026gt;BIB-0000-0000-0152\u0026lt;/controlfield\u0026gt; \u0026lt;controlfield tag=\u0026#34;003\u0026#34;\u0026gt;ObibOrg\u0026lt;/controlfield\u0026gt; \u0026lt;controlfield tag=\u0026#34;005\u0026#34;\u0026gt;20201001000000.0\u0026lt;/controlfield\u0026gt; \u0026lt;controlfield tag=\u0026#34;008\u0026#34;\u0026gt;201001t20182018nyu 000 f eng d\u0026lt;/controlfield\u0026gt; \u0026lt;datafield tag=\u0026#34;010\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;2018945140\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;020\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;9780316484800\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;q\u0026#34;\u0026gt;(hardcover)\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;020\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;0316484806\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;q\u0026#34;\u0026gt;(hardcover)\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;035\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;(ObibOrg)BIB-0000-0000-0152\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;040\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;ObibOrg\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;b\u0026#34;\u0026gt;eng\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;e\u0026#34;\u0026gt;rda\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;ObibOrg\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;043\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;n-us-ca\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;100\u0026#34; ind1=\u0026#34;1\u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Connelly, Michael,\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;d\u0026#34;\u0026gt;1956-\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;e\u0026#34;\u0026gt;author.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;245\u0026#34; ind1=\u0026#34;1\u0026#34; ind2=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Dark sacred night /\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;Michael Connelly.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;250\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;First edition.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;264\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;New York, New York :\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;b\u0026#34;\u0026gt;Little, Brown and Company,\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;2018.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;264\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;©2018\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;300\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;433 pages ;\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;25 cm.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;336\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;text\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;b\u0026#34;\u0026gt;txt\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;2\u0026#34;\u0026gt;rdacontent\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;337\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;unmediated\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;b\u0026#34;\u0026gt;n\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;2\u0026#34;\u0026gt;rdamedia\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;338\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;volume\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;b\u0026#34;\u0026gt;nc\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;2\u0026#34;\u0026gt;rdacarrier\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;490\u0026#34; ind1=\u0026#34;0\u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Ballard and Bosch novel\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;500\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;This is a Ballard and Bosch Novel, a spin-off of the Harry Bosch series.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;520\u0026#34; ind1=\u0026#34;0\u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Harry Bosch and Renée Ballard team up to investigate the homicide of a runaway teenage girl.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;588\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;This bibliographic record is licensed under Creative Commons CC0 1.0.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;650\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Murder\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;x\u0026#34;\u0026gt;Investigation\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;v\u0026#34;\u0026gt;Fiction.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;650\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Cold cases (Criminal investigation)\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;v\u0026#34;\u0026gt;Fiction.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;600\u0026#34; ind1=\u0026#34;1\u0026#34; ind2=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Bosch, Harry\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;v\u0026#34;\u0026gt;Fiction.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;650\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Women detectives\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;v\u0026#34;\u0026gt;Fiction.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;650\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Police\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;z\u0026#34;\u0026gt;California\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;z\u0026#34;\u0026gt;Los Angeles\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;v\u0026#34;\u0026gt;Fiction.\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;655\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;7\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Detective and mystery fiction.\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;2\u0026#34;\u0026gt;lcgft\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;655\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34;7\u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Thrillers (Fiction)\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;2\u0026#34;\u0026gt;lcgft\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;datafield tag=\u0026#34;907\u0026#34; ind1=\u0026#34; \u0026#34; ind2=\u0026#34; \u0026#34;\u0026gt; \u0026lt;subfield code=\u0026#34;a\u0026#34;\u0026gt;Novel\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;b\u0026#34;\u0026gt;Mystery\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;b\u0026#34;\u0026gt;Suspense / Thriller\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;Cold case\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;Detective\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;Imaginary person\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;Investigation\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;Murder\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;North America\u0026lt;/subfield\u0026gt; \u0026lt;subfield code=\u0026#34;c\u0026#34;\u0026gt;Police\u0026lt;/subfield\u0026gt; \u0026lt;/datafield\u0026gt; \u0026lt;/record\u0026gt;   ","description":"","id":10,"section":"blog","tags":["python","regex","xml","text file","project"],"title":"Python RegEx Project","uri":"https://alisha.dev/blog/python_marctxt/"},{"content":"Project description Extract Excel data to generate an XML file using the Python openpyxl library.\nInstall openpyxl on Windows Download the latest version of openpyxl.\nIn a command prompt window, run: pip install openpyxl\nPython code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import openpyxl from openpyxl import load_workbook from lxml import etree # load excel with its path xlsPath = \u0026#39;bib.xlsx\u0026#39; workBook = openpyxl.load_workbook(xlsPath) # open excel workbook. workSheet = workBook[\u0026#39;Sheet1\u0026#39;] # specify sheet. xmlRootNode = etree.Element(\u0026#39;bib\u0026#39;) # create xml root node. colNum = 1 for row in workSheet.iter_rows(min_row=2, max_row=7, min_col=1, max_col=6): record = etree.SubElement(xmlRootNode, \u0026#39;record\u0026#39;) # create new record node. colNum = 1 # reset column index. for cell in row: colHeaderName = workSheet.cell(row=1, column=colNum).value # get first row header. tagNameNoSpaces = colHeaderName.replace(\u0026#39; \u0026#39;,\u0026#39;\u0026#39;) # xml disallows spaces in tag names. tagValueNonBlank = str(cell.value if cell.value else \u0026#39;\u0026#39;) # handle empty cells. etree.SubElement(record, tagNameNoSpaces).text = tagValueNonBlank # add new xml element to current record node. colNum += 1 # increment column index. # generate xml file: fileContent = etree.tostring(xmlRootNode, encoding=\u0026#39;unicode\u0026#39;, pretty_print=True) with open(\u0026#39;bib.xml\u0026#39;, \u0026#39;w\u0026#39;, encoding = \u0026#39;utf-8\u0026#39;) as myFile: # open file for writing. myFile.write(fileContent) # specify string to write. # print xml file: declaration = \u0026#39;\u0026lt;?xml version=\\\u0026#39;1.0\\\u0026#39;encoding=\\\u0026#39;utf-8\\\u0026#39;?\u0026gt;\u0026#39; print(declaration) print(etree.tostring(xmlRootNode, encoding=\u0026#39;unicode\u0026#39;, pretty_print=True))   Excel file Generated XML file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  \u0026lt;bib\u0026gt; \u0026lt;record\u0026gt; \u0026lt;Title\u0026gt;Dark sacred night\u0026lt;/Title\u0026gt; \u0026lt;ISBN\u0026gt;9780316484800\u0026lt;/ISBN\u0026gt; \u0026lt;Author\u0026gt;Michael Connelly\u0026lt;/Author\u0026gt; \u0026lt;PlaceOfPublication\u0026gt;New York\u0026lt;/PlaceOfPublication\u0026gt; \u0026lt;Publisher\u0026gt;Grand Central Publishing\u0026lt;/Publisher\u0026gt; \u0026lt;PublicationDate\u0026gt;2019\u0026lt;/PublicationDate\u0026gt; \u0026lt;/record\u0026gt; \u0026lt;record\u0026gt; \u0026lt;Title\u0026gt;10 things I can see from here\u0026lt;/Title\u0026gt; \u0026lt;ISBN\u0026gt;9780399556258\u0026lt;/ISBN\u0026gt; \u0026lt;Author\u0026gt;Carrie Mac\u0026lt;/Author\u0026gt; \u0026lt;PlaceOfPublication\u0026gt;New York\u0026lt;/PlaceOfPublication\u0026gt; \u0026lt;Publisher\u0026gt;Alfred A. Knopf\u0026lt;/Publisher\u0026gt; \u0026lt;PublicationDate\u0026gt;2017\u0026lt;/PublicationDate\u0026gt; \u0026lt;/record\u0026gt; \u0026lt;record\u0026gt; \u0026lt;Title\u0026gt;28 Barbary Lane\u0026lt;/Title\u0026gt; \u0026lt;ISBN\u0026gt;9780062499011\u0026lt;/ISBN\u0026gt; \u0026lt;Author\u0026gt;Armistead Maupin\u0026lt;/Author\u0026gt; \u0026lt;PlaceOfPublication\u0026gt;New York\u0026lt;/PlaceOfPublication\u0026gt; \u0026lt;Publisher\u0026gt;Harper Perennial\u0026lt;/Publisher\u0026gt; \u0026lt;PublicationDate\u0026gt;2016\u0026lt;/PublicationDate\u0026gt; \u0026lt;/record\u0026gt; \u0026lt;record\u0026gt; \u0026lt;Title\u0026gt;Aesop\u0026#39;s fables\u0026lt;/Title\u0026gt; \u0026lt;ISBN\u0026gt;9781896580814\u0026lt;/ISBN\u0026gt; \u0026lt;Author\u0026gt;Michael Rosen\u0026lt;/Author\u0026gt; \u0026lt;PlaceOfPublication\u0026gt;Vancouver\u0026lt;/PlaceOfPublication\u0026gt; \u0026lt;Publisher\u0026gt;Tradewind Books\u0026lt;/Publisher\u0026gt; \u0026lt;PublicationDate\u0026gt;2013\u0026lt;/PublicationDate\u0026gt; \u0026lt;/record\u0026gt; \u0026lt;record\u0026gt; \u0026lt;Title\u0026gt;Even dogs in the wild\u0026lt;/Title\u0026gt; \u0026lt;ISBN\u0026gt;9781410485311\u0026lt;/ISBN\u0026gt; \u0026lt;Author\u0026gt;Ian Rankin\u0026lt;/Author\u0026gt; \u0026lt;PlaceOfPublication\u0026gt;Farmington Hills\u0026lt;/PlaceOfPublication\u0026gt; \u0026lt;Publisher\u0026gt;Thorndike Press\u0026lt;/Publisher\u0026gt; \u0026lt;PublicationDate\u0026gt;2016\u0026lt;/PublicationDate\u0026gt; \u0026lt;/record\u0026gt; \u0026lt;record\u0026gt; \u0026lt;Title\u0026gt;House by the river\u0026lt;/Title\u0026gt; \u0026lt;ISBN\u0026gt;9781542045896\u0026lt;/ISBN\u0026gt; \u0026lt;Author\u0026gt;Lena Manta\u0026lt;/Author\u0026gt; \u0026lt;PlaceOfPublication\u0026gt;Seattle\u0026lt;/PlaceOfPublication\u0026gt; \u0026lt;Publisher\u0026gt;AmazonCrossing\u0026lt;/Publisher\u0026gt; \u0026lt;PublicationDate\u0026gt;2017\u0026lt;/PublicationDate\u0026gt; \u0026lt;/record\u0026gt; \u0026lt;/bib\u0026gt;   ","description":"","id":11,"section":"blog","tags":["python","excel","xml","project"],"title":"Python Excel Project","uri":"https://alisha.dev/blog/python_excel/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nRegular Expressions Resources: See W3 Schools Tutorials for further information.\nCommon RegEx Characters \r\r\rCharacter\rNotes\r\r\r\r\r?\r0 or 1 occurence of the preceding character\r\r\r+\r1 or more occurences of the preceding character\r\r\r*\r0 or more occurences of the preceding character\r\r\\\rEscape character\r\r\r.\rAny character except newline\r\r\r\r\\d\rSingle numeral\r\r\r\\w\rSingle character from a to Z, 0-9, or underscore\r\r\r\\s\rWhite space character\r\r\r|\rEither or\r\r\r()\rwithin a group\r\r\r\rExample 1: Find all instances of a lowercase word that may be in the singular or plural e.g. garden or gardens gardens?\n\rExample 2: Find all instances of words that differ by a specified character e.g. shot or shoot shoo?t\n\rExample 3: Find all instances of a phrase with noun variations e.g. I like \u0026hellip; I like (dogs|cats|rabbits)\n\rExample 4: Find all instances of a positive integer of one or more of a digit e.g. 9, 99, or 999 9+\n\rExample 5: Find all \u0026ldquo;double 0\u0026rdquo; agent codes e.g. 007, 008, 009 00\\d\n\rExample 6: Recognize standard format dates e.g. 03/22/1990 \\d\\d/\\d\\d/\\d\\d\\d\\d\n\rExample 7: Find all instances of positive integers of different lengths that begin with the same known digits followed by unknown digits e.g. 007 or 0014 00\\d+\n\rExample 8: Find all instances of positive integers of different lengths that begin with the same known digits followed by zero or more unknown digits e.g. 00, 007 or 0014 00\\d*\n\rExample 9: Find all instances of a decimal number e.g. 22.17 \\d\\d\\.\\d\\d\n","description":"","id":12,"section":"blog","tags":["regex"],"title":"Regular Expressions","uri":"https://alisha.dev/blog/regex_syntax/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nUsing Python to parse JSON\nParse JSON Deserialization\nUse json.loads() to parse a JSON string to a Python dictionary.\nUse json.load() to parse a JSON file to a Python dictionary.\nSerialization\nUse json.dumps() to convert a Python dictionary to a JSON string. Pass the indent parameter into json.dumps() to format the string.\nUse json.dump() to convert a Python dictionary to a JSON file.\nExample: import json #import the Python built-in json module\nwith open('books.json') as myfile:\npyDict = json.load(myfile) #parse json\nprint(json.dumps(pyDict, indent=4))\n\rUpdate JSON File Example: import json\nwith open('booktitle.json') as fileObj: # Create Python object from JSON file.\npyDict = json.load(fileObj) pyDict.update({\u0026quot;publication_date\u0026quot;: 2020}) #update value.\njsonFormattedStr = json.dumps(jsonObj, indent=2)\nprint(jsonFormattedStr)\n\rExample: import json\nwith open('booktitle.json') as fileObj: # Create Python object from JSON file.\npyDict = json.load(fileObj)\npyDict[\u0026quot;binding\u0026quot;] = \u0026quot;paperback\u0026quot; #add new key and value.\njsonFormattedStr = json.dumps(jsonObj, indent=2)\nprint(jsonFormattedStr)\n\rExample: import json\nwith open('bookslist.json') as fileObj: # Create Python object from JSON file.\npyList = json.load(fileObj) #json array converted to Python list.\npyList[2]['booktitle'] = 'Watership down' # Update 3rd key and value.\npyList[2]['author'] = 'Adams, Richard'\npyList[2]['publisher'] = 'Scribner'\npyList[2]['publication_date'] = 2005\njsonFormattedStr = json.dumps(jsonObj, indent=2)\nprint(jsonFormattedStr)\n\r","description":"","id":13,"section":"blog","tags":["python","json"],"title":"Basic Python JSON","uri":"https://alisha.dev/blog/python_json/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nUsing the lxml Python library to parse XML\nInstall lxml on Windows See the latest version of lxml.\nIn a command prompt window, run: pip install lxml\nUse etree to transform an XML string Use etree.fromstring() to convert an xml string to a lxml element.\nUse etree.tostring() to convert a lxml element back to an xml string.\nExample: from lxml import etree #import the lxml etree module\nxmlString = \u0026quot;\u0026lt;record\u0026gt;\u0026lt;booktitle\u0026gt;Dark sacred night\u0026lt;/booktitle\u0026gt;\u0026lt;author\u0026gt;Connelly, Michael\u0026lt;/author\u0026gt;\u0026lt;publisher\u0026gt;Little, Brown and Company\u0026lt;/publisher\u0026gt;\u0026lt;publication_date\u0026gt;\u0026lt;/publication_date\u0026gt;\u0026lt;/record\u0026gt;\u0026quot;\nxmlRootElement = etree.fromstring(xmlString) #get root element xmlRootElement.find(\u0026quot;publication_date\u0026quot;).text = \u0026quot;2018\u0026quot; #set root element text\nprint(etree.tostring(xmlRootElement, encoding='unicode', pretty_print=True))\n\rExample: from lxml import etree #import the lxml etree module\ndef parseXML(filePath):\nrootXmlObj = etree.parse(filePath) #parse file\nprint(etree.tostring(rootXmlObj, encoding='unicode', pretty_print=True))\nparseXML(\u0026quot;C:\\Users\\Desktop\\Python files\\darksn.xml\u0026quot;)\n\rExample: from lxml import etree #import the lxml etree module\nbib = etree.Element('bib')\nrecord = etree.SubElement(bib, 'record')\netree.SubElement(record, 'booktitle').text = 'Dark sacred night'\netree.SubElement(record, 'isbn').text = '9780316484800'\netree.SubElement(record, 'author').text = 'Connelly, Michael'\netree.SubElement(record, 'publication_place').text = 'New York, NY'\netree.SubElement(record, 'publisher').text = 'Little, Brown and Company'\netree.SubElement(record, 'publication_date').text = '2018'\ndeclaration = '\u0026lt;?xml version='1.0' encoding='utf-8'?\u0026gt;'\nprint(declaration)\nprint(etree.tostring(bib, encoding='unicode', pretty_print=True))\n\r","description":"","id":14,"section":"blog","tags":["python","xml","lxml"],"title":"Python XML","uri":"https://alisha.dev/blog/python_xml/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nCommon functions for files\u0026hellip;\nOpen file open('file name', 'mode')\nSpecify the file name as an input parameter.\nSpecify the mode as a second parameter.\n\r\r\rMode\rSyntax\rNotes\r\r\r\r\rWrite\r\u0026#39;w\u0026#39;\rCreates a new file if the file does not exist\r\r\rAppend\r\u0026#39;a\u0026#39;\rCreates a new file if the file does not exist\r\r\rRead\r\u0026#39;r\u0026#39;\rReturns an error if the file does not exist\r\r\rCreate\r\u0026#39;x\u0026#39;\rReturns an error if the file does not exist\r\r\r\rThe default mode is 'r' for read and does not need to be specified.\nOptionally specify a second mode:\n\r\r\rMode\rSyntax\r\r\r\r\rText mode\r\u0026#39;t\u0026#39;\r\r\rBinary mode\r\u0026#39;b\u0026#39;\r\r\r\rThe default value is 't' and does not need to be specified. Use 'b' for images.\nExample: myFile = open('sample.txt') # open text file. data = myFile.read() # return file data as a string.\nmyFile.close() # close file.\n\rRead file Use r to read file.\nExample: myFile = open('sample.txt', 'r') # open file. print(myFile.read()) # read file and display content.\n\rWrite file Use w to write to a file. Overwrites existing file content.\nExample: myFile = open('sample.txt', 'w') # open file myFile.write('My file content.') # specify string to write.\nmyFile.close() # close file.\nmyFile = open('sample.txt')\nprint(myFile.read())\n\rMy file content.\n\rExample: with open('sample.txt', 'w') as myFile: # open file. myFile.write('My file content.') # specify string to write.\nmyFile = open('sample.txt')\nprint(myFile.read())\n\rMy file content.\n\rAppend content Use a to append content to the end of a file.\nExample: with open('sample.txt', 'a') as myFile: # open file to append. myFile.write('\\nMy file additional content.') # specify string.\nmyFile = open('sample.txt')\nprint(myFile.read())\n\rMy file content.\nMy file additional content.\n","description":"","id":15,"section":"blog","tags":["python"],"title":"Basic Python Files","uri":"https://alisha.dev/blog/python_files/"},{"content":"\nHow to install \u0026amp; use OpenRefine on Windows\u0026hellip;\nDownload the latest stable version of the Windows kit with embedded Java.\rExtract the files.\rRun openrefine.exe. This initializes in the command line prompt.\rOpenRefine launches in a tab in your browser.\rTo open an Excel data file stored on your computer, go to Browse and select a file, then click Next.\rSelect options for parsing your data. To begin data clean-up, click Create Project (top right in tab). Select a data column such as Author, click the drop-down arrow in the column header, then select Facet -- Text facet. The data you selected (with counts) is displayed in the left hand pane. Click Cluster and select a method such as nearest neighbor to find clusters of variant data (typically introduced through user-input errors).\rSelect the correct value and click to use it as the New cell value (Merge shoud be auto-checked). Click Merge Selected and Close or Merge Selected and Re-Cluster to continue working with the next cluster. ","description":"","id":16,"section":"blog","tags":["openrefine"],"title":"Getting started with OpenRefine","uri":"https://alisha.dev/blog/install_openrefine/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nCommon loops\nFor loop Indent statements in loop\nExample: def Fahrenheit2Celcius(degrees):\nprint('Celsius -\u0026gt; Fahrenheit')\nfor celsius in degrees:\nfahrenheit = (celsius * 9/5) + 32\nprint(celsius, '-\u0026gt;', fahrenheit)\nFahrenheit2Celcius([0,5,10,15,20, 25, 30, 35, 40])\n\rCelsius -\u0026gt; Fahrenheit\n0 -\u0026gt; 32.0\n5 -\u0026gt; 41.0\n10 -\u0026gt; 50.0\n15 -\u0026gt; 59.0\n20 -\u0026gt; 68.0\n25 -\u0026gt; 77.0\n30 -\u0026gt; 86.0\n35 -\u0026gt; 95.0\n40 -\u0026gt; 104.0\n\rRange range()\nParameters include start of range, end of range (upto but not including the end value), and optionally the increment. To return a sequence of integers from 0 to n, specify n-1 as a single parameter.\nExample: def Celsius2Fahrenheit():\nprint('Celsius -\u0026gt; Fahrenheit')\nfor celcius in range(10, 35, 5): # Specify start, end, \u0026amp; increment.\nfahrenheit = (celcius * 9/5) + 32\nprint(celcius, '-\u0026gt;', fahrenheit)\nCelsius2Fahrenheit()\n\rCelsius -\u0026gt; Fahrenheit\n10 -\u0026gt; 50.0\n15 -\u0026gt; 59.0\n20 -\u0026gt; 68.0\n25 -\u0026gt; 77.0\n30 -\u0026gt; 86.0\n","description":"","id":17,"section":"blog","tags":["python"],"title":"Basic Python Loops","uri":"https://alisha.dev/blog/python_loops/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nCommon functions and methods for lists, tuples, and sets.\nLists listName = [item1, item2, item3\u0026hellip;]\nLists may contain multiple data types (strings, integers, etc.)\nItems in a list are indexed in numerical order from 0.\nLists permit duplicate values.\nLists are mutable. Items can be changed, added, reordered, or removed.\nExample: list1 = [\u0026quot;Ali\u0026quot;, 17639, True] #list contains string, integer, and Boolean items.\nprint(list1)\n\r['Ali', 17639, True]\n\rTuples tupleName = (item1,)\ntupleName = (item1, item2, item3\u0026hellip;)\nA tuple may contain one or more items (for a tuple of one item, the comma is mandatory). Tuples may contain multiple data types (strings, integers, etc.)\nItems in a tuple are indexed in numerical order from 0.\nTuples permit duplicate values.\nTuples are immutable. Items in a tuple cannot be changed or removed, and new items cannot be added.\nExample: tuple1 = (\u0026quot;Ali\u0026quot;, 17639, True) #tuple contains string, integer, and Boolean items.\nprint(tuple1)\n\r['Ali', 17639, True]\n\rDetermine Length of List or Tuple len()\nBegins with 1.\nExample: \u0026gt;\u0026gt;\u0026gt; len(list1)\n\r3\n\rAccess Items Access items in a list or a tuple by referencing the index in square brackets. Access the last item using -1.\nTo access a range, give the start or end index, or specify both. If the end index is specified, the result includes items upto (but excluding) the final index.\nExample: colorList = [\u0026quot;red\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;cyan\u0026quot;, \u0026quot;magenta\u0026quot;]\nprint(colorList[-1])\n\rmagenta\n\rExample: colorList = [\u0026quot;red\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;cyan\u0026quot;, \u0026quot;magenta\u0026quot;]\nprint(colorList[3:]) #omit the end index (no space after colon).\n\r['yellow', 'cyan', 'magenta']\n\rExample: colorList = [\u0026quot;red\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;cyan\u0026quot;, \u0026quot;magenta\u0026quot;]\nprint(colorList[:3]) #omit the first index (no space before colon).\n\r['red', 'blue', 'green'] #returns a list upto but excluding the specified end index.\n\rExample: colorList = [\u0026quot;red\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;cyan\u0026quot;, \u0026quot;magenta\u0026quot;]\nprint(colorList[2:4])\n\r['green', 'yellow'] #returns a list from the first specified index upto but excluding the specified end index.\n\rGenerate a list of integers range()\nExample: print(list(range(10)))\n\r[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] #generates a list of integers from 0 to 9.\n\rJoin or Multiply + * Use operators to join or multiply lists or tuples.\nExample: primaryColors = [\u0026quot;red\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;green\u0026quot;]\nsecondaryColors = [\u0026quot;yellow\u0026quot;, \u0026quot;cyan\u0026quot;, \u0026quot;magenta\u0026quot;]\ncolorList = primaryColors + secondaryColors\nprint(colorList)\n\r['red', 'blue', 'green', 'yellow', 'cyan', 'magenta']\n\rExample: cars = (\u0026quot;Toyota\u0026quot;, \u0026quot;Skoda\u0026quot;) #tuple carsRented = cars * 2\nprint(carsRented)\n\r('Toyota', 'Skoda', 'Toyota', 'Skoda')\n\rSets setName = {item1, item2, item3\u0026hellip;}\nSets may contain multiple data types (strings, integers, etc.)\nItems in a set are not indexed and unordered.\nSets do not permit duplicate values (duplicate values are disregarded). Use case: convert a list to a set to deduplicate items.\nItems in a set cannot be changed or removed, but new items can be added.\nAdd item to an existing set set.add(item)\nAdd new item to existing set\nset.update(set2)\nUpdate an existing set with items from another set\nExample: ingredients = {\u0026quot;flour\u0026quot;, \u0026quot;butter\u0026quot;, \u0026quot;sugar\u0026quot;}\nprint(ingredients)\ningredients.add(\u0026quot;salt\u0026quot;)\nprint(ingredients)\n\r{'flour', 'sugar', 'butter'} #items unordered.\n{'flour', 'sugar', 'salt', 'butter'}\n\rExample: cars = {\u0026quot;Toyota\u0026quot;, \u0026quot;Skoda\u0026quot;}\nnewCars = {\u0026quot;Fiat\u0026quot;, \u0026quot;Toyota\u0026quot;, \u0026quot;Honda\u0026quot;}\ncars.update(newCars)\nprint(cars)\n\r{'Fiat', 'Toyota', 'Honda', 'Skoda'} #duplicate items omitted.\n\rList methods Resources: See W3 Schools Tutorials for further examples.\n\r\r\rMethod\rSyntax\rNotes\r\r\r\r\rSplit string\rstring.split()\rAccepts a separator as an input parameter. If no separator is specified (default), the string is split at whitespaces (blanks, newlines, tabs) and the split string is returned as a list. If a separator is specified, the string is split at the separator, the separator is omitted from the string, and the remaining parts returned in a list.\r\r\rJoin string\rseparator.join(iterable)\rAccepts an iterable (list etc.) as an input parameter, and uses the specified separator to join items in a string.\r\r\rAppend item\rlistName.append('new_item')\rAppend a new item to the end of a list.\r\r\rInsert item\rlistName.insert(index, 'new_item')\rInsert a new item at the specfied index in a list.\r\r\rChange item\rlistName[index] = 'new_value'\rChange the value of an item at a specfied index in a list. To change a range of values, specify the start and end index of the range [start index:end index]. Values change upto but not including the end index.\r\r\rRemove item\rlistName.remove('item')\rRemove a specified item from a list.\r\r\rRemove last/indexed item\rlistName.remove()\rSpecify the index of the item to be removed as a parameter. If no parameter is specified (default), the last item in the list is removed.\r\r\rExtend list\rlist1.extend(list2)\rExtend list1 by adding items from list2. Also use for tuples, sets, dictionaries etc.\r\r\rDelete list\rdel listName\rDelete a list. Can also delete a specified item using square brackets to specify the index.\r\r\rSort list\rlistName.sort()\rSort a list in ascending order. To sort in descending order use (reverse = True) as the input parameter.\r\r\rCopy list\rnewList = existingList.copy()\rCreate a copy of an existing list.\r\r\r","description":"","id":18,"section":"blog","tags":["python"],"title":"Basic Python Lists, Tuples, Sets","uri":"https://alisha.dev/blog/python_lists/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\rCreate Function def basic_function():\nUse def to define a function with parenthesis for parameters. Optionally pass parameters (data) into the function to return a result.\nIndent codelines in the body of the function. Any lines not indented will run before the function is called.\nRun the function by calling it.\nExample: def greeting(): #define function. print(\u0026quot;Hello!\u0026quot;) #indented lines of code belong to function.\nprint(\u0026quot;This is my first function.\u0026quot;)\ngreeting() #call the function.\n\rHello!\nThis is my first function.\n\rExample: def calcPercent(number, percent): #define parameters. numPercent = (number * percent) / 100\nprint(numPercent,'%',sep='')\ndef main(): number = float(input('Enter a number: ')) percent = float(input('Enter a percent: '))\ncalcPercent(number, percent) #pass user input into calcPercent. main() #call the main function.\n\rEnter a number: 220\nEnter a percent: 10\n22.0%\n\rExample: def calcPercent(number, percent): #define parameters.\nnumPercent = (number * percent) / 100\nreturn numPercent\ndef main(): number = float(input('Enter a number: ')) percent = float(input('Enter a percent: '))\nprint(calcPercent(number, percent),'%',sep='') #pass-in user input. main() #call the function.\n\rEnter a number: 220\nEnter a percent: 10\n22.0%\n","description":"","id":19,"section":"blog","tags":["python"],"title":"Defining Python Functions","uri":"https://alisha.dev/blog/python_def/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nCommon functions and methods for strings\u0026hellip;\nPrint function print()\nExample: name = 'Nina' #define variable \u0026amp; assign a string value.\naddress = 'Hollyhock Cottage\nprint(name,\u0026quot;resides at\u0026quot;,address) #print inserts default space in output.\n\rNina resides at Hollyhock Cottage\n\rSep parameter in print function sep = ‘’\nUse sep parameter. Use single quotes to specify the separator for the arguments in the output string.\nThe default is no-space.\nExample: name = 'Nina' #define variable \u0026amp; assign a string value.\naddress = 'Hollyhock Cottage\nprint(name,\u0026quot; resides at \u0026quot;,address,\u0026quot;.\u0026quot;,sep='') #Sep parameter with no-space overrides space inserted by print. Use spaces in \u0026quot; resides at \u0026quot;.\n\rNina resides at Hollyhock Cottage.\n\rSep parameter in print function Use sep parameter. Use single quotes to specify the separator for the arguments in the output string.\nExample: name = 'Nina'\naddress = 'Hollyhock Cottage'\nstate = 'California'\nprint(name,address,state,sep=',') #Use sep to insert comma.\n\rNina,Hollyhock Cottage,California\n\rFormat method string.format() \u0026lt;string with placeholder(s)\u0026gt;.format(value1, value2)\nThe format method assigns a numerical index (beginning with 0) to each string value. Specify string values in the format method.\nSpecify numerical index (correlating to the required value) in the string's placeholder(s) using curly braces.\nExample: name = 'Nina'\nprint('Hello {0}'.format(name)) #format method indexes parameter(s) and inserts them in the string's placeholder(s) {}.\n\rHello Nina\n\rExample: name = 'Nina'\nlibrary = 'Marsh Public Library' book = 'The Hungry Tide' print('Hello {0}, {2} is ready for pickup from {1}.'.format(name,library,book)) #format method indexes parameters in numerical order and inserts them in the string's placeholders {}.\n\rHello Nina, The Hungry Tide is ready for pickup from Marsh Public Library.\n\rF strings f‘ ’\nInsert string values in placeholders using curly braces in f-string.\nAn alternative to the string format method with simpler syntax (Python 3.6 and above).\nUse uppercase F or lowercase f. Use single or double quotes.\nExample: name = 'Nina'\nprint(f'Hello {name}')\n\rHello Nina\n\rExample: name = 'Nina'\nlibrary = 'Marsh Public Library'\nbook = 'The Hungry Tide' print(f'Hello {name}, {book} is ready for pickup from {library}.')\n\rHello Nina, The Hungry Tide is ready for pickup from Marsh Public Library.\n\rString representation of a number with specified decimal places Example: tempFahrenheit = float(input(\u0026quot;Enter a temperature in Fahrenheit: \u0026quot;))\ntempCentigrade = ((tempFahrenheit - 32) *5/9)\nprint(str(tempCentigrade) + chr(176)) #unrounded number\nprint(f'{tempCentigrade:.2f}' + chr(176)) #rounded to 2 decimal places.\n\rEnter a temperature in Fahrenheit: 67.2\n19.555555555555557°\n19.56°\n\rIf \u0026hellip; Else Statement with String Example: name = 'Nina'\nlibrary = 'Marsh Public Library'\nbook = 'The Hungry Tide' bookStatus = 'Available'\nif bookStatus == 'Available': # do not indent if.\nprint(f'Hello {name}, {book} is ready for pickup from {library}.')\n#use indent to define scope. else:\nprint(f'Sorry, {book} is not available yet.')\n#use indent to define scope.\n\rHello Nina, The Hungry Tide is ready for pickup from Marsh Public Library.\n\rExample: name = 'Nina'\nlibrary = 'Marsh Public Library'\nbook = 'The Hungry Tide' bookStatus = 'Not available'\nif bookStatus == 'Available': # do not indent if.\nprint(f'Hello {name}, {book} is ready for pickup from {library}.')\n#use indent to define scope. else:\nprint(f'Sorry, {book} is not available yet.')\n#use indent to define scope.\n\rSorry, The Hungry Tide is not available yet.\n\rMulti-line Strings Python permits single and double quotes. Use either (if not combining both).\nExample: address = '''Nina Adan #start with triple quotes to preserve the line structure.\n\u0026quot;Confidential\u0026quot; #double quotes to differentiate from triple quotes.\nHollyhock Cottage,\nOakwood Village,\nCalifornia''' #ending triple quotes.\nprint(address) \rNina Adan\n\u0026quot;Confidential\u0026quot;\nHollyhock Cottage,\nOakwood Village,\nCalifornia\n\rUser Input input()\nExample: name = input('Enter your name: ')\nprint('Hello',name)\n\rEnter your name:\n\rConvert String to Lowercase string.lower()\nExample: print('Visit the Help Page at Myworld.org'.lower())\n\rvisit the help page at myworld.org\n\rConvert Non-English String to Lowercase string.casefold()\nUse to convert non-English (Latin script) characters (regardless of encoding) to transliterated English lowercase characters.\nExample: GermanStr = 'ß'\nprint(GermanStr.casefold()) #convert German character ß to the equivalent English characters ss.\n\rss\n\rEncode String string.encode()\nEncode a string using specified coding. Default is UTF-8 if not specified.\nExample: \u0026gt;\u0026gt;\u0026gt; 'Château de Montbéliard'.encode(\u0026quot;utf-8\u0026quot;)\n#encode â in 2 bytes (0xc3 and 0xa2), and é in 2 bytes (0xc3 and 0xa9).\n\rb'Ch\\xc3\\xa2teau de Montb\\xc3\\xa9liard'\n\rDecode String string.decode()\nDecode characters in a string. Default is UTF-8 if not specified.\nExample: \u0026gt;\u0026gt;\u0026gt; b'Ch\\xc3\\xa2teau de Montb\\xc3\\xa9liard'.decode(\u0026quot;utf-8\u0026quot;)\n#decode characters with diacritics.\n\r'Château de Montbéliard'\n\rCheck String Check for phrase or characters using the keyword in\nReturns True or False.\nExample: address = 'Nina Adan, Hollyhock Cottage, Oakwood Village, California' print(\u0026quot;California\u0026quot; in address) #use in to check the string for California.\n\rTrue\n\rDetermine Length of String len()\nBegins with 1.\nExample: \u0026gt;\u0026gt;\u0026gt; len('The Hungry Tide')\n\r15\n\rUse Index to Locate Character string[ ]\nStrings are arrays indexed starting at position 0. Each character has a length of 1.\nSpecify the index number in square brackets to access the character.\nStrings are also indexed from the last character in the string to the start of the string using negative integers. To access the last character in a string use -1. Access the second to last character using -2, etc.\nTo access a substring, give the start or end index, or specify both. If the end index is specified, the result includes items upto (but excluding) the final index.\nExample: book = 'The Hungry Tide'\nprint(book[4]) #returns the 4th character.\n\rH\n\rExample: book = 'The Hungry Tide'\nprint(book[3]) #returns the 3rd character (blank space).\n\r\u0026gt;\u0026gt;\u0026gt;\n\rExample: myString = 'elephants'\nmySubstring = (myString[-3:]) #returns the last 3 characters.\nprint(mySubstring)\n\rnts\n\rFind Text string.find(text, start, end)\nFinds the first occurence of the text and returns the index for the first character.\n Index for the start of the range in which to search is optional (default is 0) Index for the end of the range in which to search is optional (default is the end of the string) Returns -1 if the text is not found.  Example: book = 'The Lighthouse at The Rock'\nprint('Contains The at position: ', book.find('The')) #returns the index for the first occurence of the.\n\rContains The at position: 0\n\rFind Last Text string.rfind(text, start, end)\nFinds the last occurence of the text and returns the index for the first character.\n Start index is optional (default is 0) End index is optional (default is the end of the string) Returns -1 if the text is not found.  Example: book = 'The Lighthouse at The Rock'\nprint('Contains The at position: ', book.rfind('The')) #returns the index for the last occurence of the.\n\rContains The at position: 18\n\rReplace String string.replace(old,new)\nExample: import datetime\ntimeStamp = datetime.datetime.now().strftime(\u0026quot;%I:%M%p on %B %d, %Y\u0026quot;)\nprint(\u0026quot;The time now is \u0026quot; + timeStamp.replace(\u0026quot;PM\u0026quot;,\u0026quot;pm\u0026quot;).replace(\u0026quot;AM\u0026quot;,\u0026quot;am\u0026quot;) + \u0026quot;.\u0026quot;)\n# %p returns AM/PM. Replace PM with pm and AM with am.\n\rThe time now is 11:56pm on June 06, 2021.\n\rRemove Trailing Characters string.rstrip('characters')\nExample: my_string = 'It was a dark and stormy night.'\nnewString = my_string.rstrip('.')\nprint(newString)\n\rIt was a dark and stormy night\n\rRemove Leading Characters string.lstrip('characters')\nExample: my_string = 'Part 1. \u0026quot;It was a dark and stormy night\u0026quot;.'\nnewString = my_string.lstrip('Part 1.')\nprint(newString)\n\r\u0026ldquo;It was a dark and stormy night\u0026rdquo;.\n\rConvert Integer to String str()\nExample: \u0026gt;\u0026gt;\u0026gt; str(114)\n\r'114'\n","description":"","id":20,"section":"blog","tags":["python"],"title":"Basic Python Strings","uri":"https://alisha.dev/blog/python_strings/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\r\nThere are several ways to define variables and assign values\u0026hellip;\nDefine a variable using a string value Example: movie = 'Star Wars' #define variable \u0026amp; assign a string value.\nprint(movie) #outputs value.\n\rStar Wars\n\rDefine a variable using a string concatenation expression Example: name = 'Nina' #define variable \u0026amp; assign a string value.\naddress = 'Hollyhock Cottage' #define variable \u0026amp; assign a string value.\ncontact = name + \u0026quot; resides at \u0026quot; + address #define \u0026amp; assign a string concatenation expression.\nprint(Contact) #outputs value.\n\rNina resides at Hollyhock Cottage\n\rDefine a variable using a mathematical expression Example: Number = 4 #define variable \u0026amp; assign an integer value.\nSquared = Number * Number #define variable \u0026amp; assign a mathematical expression. print(Squared) #outputs value.\n\r16\n","description":"","id":21,"section":"blog","tags":["python"],"title":"Defining Python Variables","uri":"https://alisha.dev/blog/python_variables/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\r}\r\rDateTime Type Example: import datetime #use the datetime library\ntimeStamp = datetime.datetime.now().strftime(\u0026quot;%I:%M%p on %B %d, %Y\u0026quot;)\nprint(\u0026quot;The time now is \u0026quot; + timeStamp + \u0026quot;.\u0026quot;)\n\rThe time now is 12:07PM on April 09, 2021.\n","description":"","id":22,"section":"blog","tags":["python"],"title":"Python Dates/Times","uri":"https://alisha.dev/blog/python_datetime/"},{"content":"\r.code {\rbackground-color:#404040;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r.result {\rbackground-color:#000051;\rcolor:white;\rfont-family:Consolas;\rfont-size:1.1em;\rfont-weight:500;\rpadding:10px 10px;\rmargin-bottom:20px;\r}\r\rResources: See W3 Schools Tutorials for further information.\nCommon Data Types \r\r\rData type\rConversion function\rNotes\r\r\r\r\rText\rstr()\r\r\rInteger\rint()\r\r\rFloat\rfloat()\ruse e to derive a float to the power of 10 e.g. 12e2 (float is 1200.0)\r\r\rComplex\rcomplex()\ruse j for imaginary unit\r\r\rList\rlist(())\r\r\rTuple\rtuple(())\r\r\rSet\rset(())\r\r\rDictionary\rdict(element1=value1, element2=value2...)\r\r\rBoolean\rbool()\revaluate expressions, values, variables, or strings and return True or False. (Returns false for empty strings, lists, tuples, or dictionaries, and also for numbers equal to 0) \r\r\rNoneType\r\rassign the keyword None to a variable\r\r\r\rDetermine Data Type type()\nExample: name = \u0026quot;Ali\u0026quot;\nprint(type(name))\n\r\u0026lt;class 'str'\u0026gt;\n\rExample: number = 101.2\nprint(type(number))\n\r\u0026lt;class 'float'\u0026gt;\n\rExample: memberList = [\u0026quot;Ali\u0026quot;, 17639, True] #contains string, integer, Boolean elements.\nprint(type(memberList))\n\r\u0026lt;class 'list'\u0026gt;\n","description":"","id":23,"section":"blog","tags":["python"],"title":"Python Built-In Data Types","uri":"https://alisha.dev/blog/python_datatypes/"},{"content":"\nHow to install python on Windows\u0026hellip;\nDownload the latest version of Python for Windows. Check the box for Add Python to Path.\rYou can run Python commands one line at a time in the Command Prompt window or in the Python IDLE (Integrated Development and Learning Environment) Shell. To run scripts, use the IDLE Editor.\rTo code in the Command Prompt window:\rIn Command Prompt, launch the Python interpreter by typing py and press Enter.\rType print('Hello world!') and press Enter.\rYou should see:\rHello world!\r\rTo code in Python IDLE:\rType IDLE in the Windows search bar.\rIDLE launches the Shell window.\rTo switch to the Editor, open a new file (File -- New File).\rType a simple script e.g.\r\rdocument.currentScript.parentNode.innerHTML = \"movie = input('Enter your favorite movie: ')\nprint('I like', movie)\";\r\r\rSave the file in a local folder (File -- Save As)\rRun the script (Run -- Run Module)\rYou should see:\rEnter your favorite movie:\rType your response and press Enter.\r","description":"","id":24,"section":"blog","tags":["python"],"title":"Installing Python on Windows","uri":"https://alisha.dev/blog/install_python/"},{"content":"How to create a static website using the Hugo static website generator. The instructions are geared towards Windows since that is the operating system I use the most.\nInstall Hugo on Windows Create the folder path: C:\\Hugo\\bin\rDownload the latest extended Hugo zip file since some themes require it. e.g. hugo_extended__Windows-64bit.zip\rExtract the zip file contents to the C:\\Hugo\\bin folder. The Hugo executable path is C:\\Hugo\\bin\\hugo.exe.\rAdd the folder path C:\\Hugo\\bin\\ to your system environment variables.\rSearch for \"env\" in the Windows search bar and select Edit the System environment variables\rEnter an administrator password if prompted.\rClick on the Environment Variables button.\rIn the System variables section click on path entry\rClick on New and add the path C:\\Hugo\\bin\r\rTo test the installation:\rOpen a new command prompt window (search for cmd and select Command Prompt)\rType hugo help and press Enter.\rYou should see usage documentation starting with:\r\r\rHugo is the main command, used to build your Hugo site.\nHugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.\rInstall a Hugo theme Create a new folder for your website files. I use a different drive or partition from my operating system (e.g. D:\\Data\\MyBlogSite) so that I can back up my website easily.\rInitialize a new website:\rOpen a new command prompt window.\rChange directory to the website folder (e.g. cd D:\\Data\\MyBlogSite).\rType \"hugo new site\" (no quotes), and press enter.\r\rSelect and click on a Hugo theme to navigate to the theme's GitHub page.\rClick on the Download ZIP button:\nExtract the zip file contents to your MyBlogSite folder.\rFollow the instructions on the theme's GitHub page for how to configure the theme.\rAdd a batch file in your MyBlogSite folder to start the Hugo server:\rCreate a new text file in your MyBlogSite folder and add the text hugo server.\rSave the file and rename it to hugo_server.bat.\rDouble-click the file to start the Hugo server.\r\rOpen a browser window and navigate to http://localhost:1313/\rYou should now see the home page of your new static website!\r","description":"","id":25,"section":"blog","tags":["hugo","static website","environment variables"],"title":"Creating a Hugo Static Site","uri":"https://alisha.dev/blog/install_hugo/"},{"content":"Visual Studio installation   Download Visual Studio community edition, and run the installer.\n  In the install options window select the Python development option, and click the \u0026lsquo;Install\u0026rsquo; button:   Wait for the installer to complete, and click the \u0026lsquo;Launch\u0026rsquo; button:   Click \u0026lsquo;Not now, maybe later\u0026rsquo; link:   Click the \u0026lsquo;Start Visual Studio\u0026rsquo; button:   Select File \u0026ndash;\u0026gt; New \u0026ndash;\u0026gt; Project:   Select Python application, and click the \u0026lsquo;Next\u0026rsquo; button:   Specify the project name, location, and solution name, and click the \u0026lsquo;Create\u0026rsquo; button:   Visual Studio opens the project\u0026rsquo;s Python code file for editing.\n ","description":"","id":26,"section":"blog","tags":["visual studio","editor"],"title":"Visual Studio Installation","uri":"https://alisha.dev/blog/python_vside/"}]